#include <iostream>
#include <vector>
using namespace std;

bool ok(vector<vector<int>> &g, int r, int c, int v) {
    for (int x = 0; x < 9; x++)
        if (g[r][x] == v || g[x][c] == v)
            return false;

    int sr = r - r % 3, sc = c - c % 3;
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (g[sr + i][sc + j] == v)
                return false;

    return true;
}

bool dfs(vector<vector<int>> &g, int r, int c) {
    if (r == 8 && c == 9)
        return true;
    if (c == 9) {
        r++;
        c = 0;
    }
    if (g[r][c] != 0)
        return dfs(g, r, c + 1);

    for (int v = 1; v <= 9; v++) {
        if (ok(g, r, c, v)) {
            g[r][c] = v;
            if (dfs(g, r, c + 1))
                return true;
            g[r][c] = 0;
        }
    }
    return false;
}

void solve(vector<vector<int>> &g) {
    dfs(g, 0, 0);
}

int main() {
    vector<vector<int>> g = {
        {3, 0, 6, 5, 0, 8, 4, 0, 0},
        {5, 2, 0, 0, 0, 0, 0, 0, 0},
        {0, 8, 7, 0, 0, 0, 0, 3, 1},
        {0, 0, 3, 0, 1, 0, 0, 8, 0},
        {9, 0, 0, 8, 6, 3, 0, 0, 5},
        {0, 5, 0, 0, 9, 0, 6, 0, 0},
        {1, 3, 0, 0, 0, 0, 2, 5, 0},
        {0, 0, 0, 0, 0, 0, 0, 7, 4},
        {0, 0, 5, 2, 0, 6, 3, 0, 0}
    };

    solve(g);

    for (int i = 0; i < g.size(); i++) {
        for (int j = 0; j < g.size(); j++)
            cout << g[i][j] << " ";
        cout << endl;
    }

    return 0;
}
